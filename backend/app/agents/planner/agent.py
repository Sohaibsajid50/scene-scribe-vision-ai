from dotenv import load_dotenv
from google import genai
import os
from google.adk.agents import Agent, LlmAgent
from google.genai import types

load_dotenv()

client = genai.Client(api_key=os.getenv("GOOGLE_API_KEY"))

def upload_to_gemini(file_path: str):
    """
    Uploads a file from a given path to Gemini.

    Args:
        file_path: The local path to the file to upload.

    Returns:
        The uploaded file object from Gemini.
    """
    myfile = client.files.upload(file=file_path)
    return myfile

async def generate_from_file(file_id: str, prompt: str):
    file_reference = client.files.get(name=file_id)
    response = client.models.generate_content(
        model="gemini-2.5-flash-preview-05-20",
        contents=[file_reference, prompt]
    )
    return response

def generate_from_youtube(
    youtube_url: str,
    prompt: str = "Summarize this video in detail."
) -> str:
    """
    Generates text output from a YouTube video using the Gemini model.

    This function uses the Gemini API to process the provided YouTube URL
    along with an optional prompt, returning the generated text.

    Args:
        youtube_url: The URL of the YouTube video to process.
            Example: "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        prompt: An optional textual instruction for the model.
            Defaults to "Summarize this video in detail."

    Returns:
        str: The text generated by the Gemini model based on the video
            and prompt. Example: "This video explains..."
    """
    response = client.models.generate_content(
        model="gemini-2.5-flash-preview-05-20",
        contents=[
            types.Part(
                file_data=types.FileData(file_uri=youtube_url)
            ),
            types.Part(text=prompt)
        ]
    )
    return response.text


planner_agent = LlmAgent(
                    name="Planner",
                    model="gemini-1.5-pro",
                    instruction="You are a conversational agent that analyzes videos and answers questions about them. "
                                "Your first task is to get the video content. If the user provides a YouTube URL, use the YouTubeGenerator agent. "
                                "If the user provides a file ID, use the VideoGenerator agent. "
                                "Once the video content is stored in 'video_text' in the session state, you must answer all follow-up questions using that text. "
                                "Do not use the tools again for the same video. "
                                "If the user wants to discuss a new video, they must start a new conversation."
                                "When given a video first use the upload to gemini tool to upload it, then use the output gemini"
                                "file id for the generate from file tool to correctly analyze the video",
                    description="Orchestrates video analysis and answers follow-up questions based on the extracted text.",
                    tools=[generate_from_youtube, generate_from_file, upload_to_gemini]
        )

root_agent = planner_agent